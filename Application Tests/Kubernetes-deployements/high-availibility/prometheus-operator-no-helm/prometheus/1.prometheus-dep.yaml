# Create MinIO bucket for Thanos
apiVersion: batch/v1
kind: Job
metadata:
  name: create-thanos-bucket
  namespace: serversage
spec:
  template:
    spec:
      containers:
      - name: mc
        # image: minio/mc:latest
        image: minio/mc:RELEASE.2025-04-16T18-13-26Z
        command:
        - /bin/sh
        - -c
        - |
          mc config host add myminio http://minio-service.minio.svc.cluster.local:9000  minio-admin minio@dm11 && \
          mc mb --ignore-existing myminio/thanos
      restartPolicy: OnFailure
---
# Prometheus instance (CRD)
apiVersion: monitoring.coreos.com/v1
kind: Prometheus
metadata:
  name: prometheus
  namespace: serversage
spec:
  replicas: 2  # HA setup with 2 replicas of prometheus is recomanded
  securityContext:
    fsGroup: 1000
    runAsUser: 1000
    runAsGroup: 1000
    runAsNonRoot: true
  serviceAccountName: prometheus
  serviceMonitorSelector: {}
  podMonitorSelector: {}
  probeSelector: {}
  scrapeInterval: "15s"
  evaluationInterval: "15s"
  retention: "30d"
  externalLabels:
    cluster: ha-cluster
  thanos:
    baseImage: quay.io/thanos/thanos
    version: v0.32.0
    objectStorageConfig:
      key: objstore.yaml
      name: thanos-objstore-config
  storage:
    volumeClaimTemplate:
      spec:
        # storageClassName: standard
        storageClassName: prometheus-storage
        resources:
          requests:
            storage: 400Mi
        selector:
          matchLabels:
            pv-name: prometheus-db-prometheus-0
---
# Thanos Configuration
apiVersion: v1
kind: Secret
metadata:
  name: thanos-objstore-config
  namespace: serversage
type: Opaque
stringData:
  objstore.yaml: |
    type: S3
    config:
      bucket: thanos
      endpoint: minio-service.minio.svc.cluster.local:9000
      access_key: minio-admin
      secret_key: minio@dm11
      insecure: true
      signature_version2: false

---
# Install Prometheus Operator CRDs
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus-operator
  namespace: serversage
  labels:
    app.kubernetes.io/name: prometheus-operator
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus-operator
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prometheus-operator
    spec:
      serviceAccountName: prometheus-operator
      containers:
      - name: prometheus-operator
        image: quay.io/prometheus-operator/prometheus-operator:v0.71.0
        args:
        - --kubelet-service=kube-system/kubelet
        - --log-level=debug
        - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.71.0
        ports:
        - containerPort: 8080
          name: http
---
# Prometheus Operator Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-operator
  namespace: serversage

---
# Prometheus Operator ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  namespace: serversage
  name: prometheus-operator
rules:
- apiGroups: ["monitoring.coreos.com"]
  resources:
  - alertmanagers
  - alertmanagers/finalizers
  - prometheuses
  - prometheuses/finalizers
  - thanosrulers
  - thanosrulers/finalizers
  - servicemonitors
  - podmonitors
  - probes
  - prometheusrules
  verbs: ["*"]
- apiGroups: ["apps"]
  resources:
  - statefulsets
  verbs: ["*"]
- apiGroups: [""]
  resources:
  - configmaps
  - secrets
  verbs: ["*"]
- apiGroups: [""]
  resources:
  - pods
  verbs: ["list", "delete"]
- apiGroups: [""]
  resources:
  - services
  - services/finalizers
  - endpoints
  verbs: ["get", "create", "update", "delete"]
- apiGroups: [""]
  resources:
  - nodes
  verbs: ["list", "watch"]
- apiGroups: [""]
  resources:
  - namespaces
  verbs: ["get", "list", "watch"]

---
# Prometheus Operator ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  namespace: serversage
  name: prometheus-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-operator
subjects:
- kind: ServiceAccount
  name: prometheus-operator
  namespace: serversage

---
# Prometheus Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: serversage

---
# Prometheus ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/metrics
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources:
  - configmaps
  verbs: ["get"]
- apiGroups: ["networking.k8s.io"]
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]

---
# Prometheus ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: serversage

---
# Node Exporter Deployment
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: node-exporter
  namespace: serversage
  labels:
    app.kubernetes.io/name: node-exporter
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: node-exporter
  template:
    metadata:
      labels:
        app.kubernetes.io/name: node-exporter
    spec:
      hostNetwork: true
      hostPID: true
      containers:
      - name: node-exporter
        image: quay.io/prometheus/node-exporter:v1.6.1
        args:
        - --path.procfs=/host/proc
        - --path.sysfs=/host/sys
        - --path.rootfs=/host/root
        - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
        - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
        ports:
        - containerPort: 9100
          name: metrics
        resources:
          limits:
            cpu: 250m
            memory: 180Mi
          requests:
            cpu: 102m
            memory: 180Mi
        volumeMounts:
        - name: proc
          mountPath: /host/proc
          readOnly: true
        - name: sys
          mountPath: /host/sys
          readOnly: true
        - name: root
          mountPath: /host/root
          readOnly: true
          mountPropagation: HostToContainer
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          capabilities:
            add: ["SYS_TIME"]
      volumes:
      - name: proc
        hostPath:
          path: /proc
      - name: sys
        hostPath:
          path: /sys
      - name: root
        hostPath:
          path: /

---
# Thanos Querier
apiVersion: apps/v1
kind: Deployment
metadata:
  name: thanos-querier
  namespace: serversage
spec:
  replicas: 2
  selector:
    matchLabels:
      app: thanos-querier
  template:
    metadata:
      labels:
        app: thanos-querier
    spec:
      containers:
      - name: thanos
        image: quay.io/thanos/thanos:v0.32.0
        args:
        - query
        - --http-address=0.0.0.0:9090
        - --grpc-address=0.0.0.0:10901
        - --query.replica-label=prometheus_replica
        - --query.replica-label=replica
        - --store=dnssrv+_grpc._tcp.prometheus-operated.serversage.svc.cluster.local
        - --store=dnssrv+_grpc._tcp.thanos-store-gateway.serversage.svc.cluster.local
        ports:
        - containerPort: 9090
          name: http
        - containerPort: 10901
          name: grpc
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: http
        readinessProbe:
          httpGet:
            path: /-/ready
            port: http
---
# Thanos Store Gateway
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: thanos-store-gateway
  namespace: serversage
spec:
  replicas: 1
  serviceName: thanos-store-gateway
  selector:
    matchLabels:
      app: thanos-store-gateway
  template:
    metadata:
      labels:
        app: thanos-store-gateway
    spec:
      securityContext:
        fsGroup: 1000  # Adding fsGroup to grant permissions to the volume
        runAsUser: 1000
        runAsGroup: 1000
      # initContainers:
      # - name: fix-permissions
      #   image: busybox
      #   command: ["sh", "-c", "chown -R 65534:65534 /var/thanos/store"]
      #   volumeMounts:
      #   - name: data
      #     mountPath: /var/thanos/store
      containers:
      - name: thanos
        image: quay.io/thanos/thanos:v0.32.0
        args:
        - store
        - --grpc-address=0.0.0.0:10901
        - --http-address=0.0.0.0:10902
        - --data-dir=/var/thanos/store
        - --objstore.config-file=/etc/thanos/objstore.yaml
        ports:
        - containerPort: 10901
          name: grpc
        - containerPort: 10902
          name: http
        volumeMounts:
        - name: data
          mountPath: /var/thanos/store
        - name: config
          mountPath: /etc/thanos
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: http
        readinessProbe:
          httpGet:
            path: /-/ready
            port: http
      volumes:
      - name: config
        secret:
          secretName: thanos-objstore-config
      - name: data
        persistentVolumeClaim:
          claimName: thanos-store-gateway-data
---
# Thanos Store Service
apiVersion: v1
kind: Service
metadata:
  name: thanos-store-gateway
  namespace: serversage
spec:
  clusterIP: None
  ports:
  - name: grpc
    port: 10901
    targetPort: 10901
  - name: http
    port: 10902
    targetPort: 10902
  selector:
    app: thanos-store-gateway
---
# Node Exporter Service
apiVersion: v1
kind: Service
metadata:
  name: node-exporter
  namespace: serversage
  labels:
    app.kubernetes.io/name: node-exporter
spec:
  ports:
  - name: metrics
    port: 9100
    targetPort: metrics
  selector:
    app.kubernetes.io/name: node-exporter
---
# Prometheus Service
apiVersion: v1
kind: Service
metadata:
  name: prometheus-operated
  namespace: serversage
  labels:
    operated-prometheus: "true"
spec:
  ports:
  - name: web
    port: 9090
    targetPort: web
  - name: thanos-sidecar
    port: 10901
    targetPort: 10901
  selector:
    app.kubernetes.io/name: prometheus
---
# Network Services
apiVersion: v1
kind: Service
metadata:
  name: thanos-querier
  namespace: serversage
spec:
  ports:
  - name: http      # give nodePort for this not in prometheus-operatored service
    port: 9090      
    targetPort: 9090
  - name: grpc
    port: 10901
    targetPort: 10901
  selector:
    app: thanos-querier
---