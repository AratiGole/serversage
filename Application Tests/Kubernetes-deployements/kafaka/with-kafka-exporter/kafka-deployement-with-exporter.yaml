


---
# ConfigMap for Kafka KRaft configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-kraft-config
  namespace: kafka
  labels:
    app.kubernetes.io/name: kafka-kraft-config
data:
  server.properties: |
    # Enable KRaft mode
    kraft.enabled=true

    # Basic Broker Settings
    broker.id=0
    node.id=0
    process.roles=broker,controller

    # Listeners
    listeners=PLAINTEXT://:9092,CONTROLLER://:9093
    advertised.listeners=PLAINTEXT://kafka-0.kafka-headless.kafka.svc.cluster.local:9092

    # Controller configuration
    controller.quorum.voters=0@kafka-0.kafka-headless.kafka.svc.cluster.local:9093
    controller.listener.names=CONTROLLER

    # Networking
    inter.broker.listener.name=PLAINTEXT
    listener.security.protocol.map=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
    num.network.threads=3
    num.io.threads=8
    socket.send.buffer.bytes=102400
    socket.receive.buffer.bytes=102400
    socket.request.max.bytes=104857600

    # Data Storage
    log.dirs=/var/lib/kafka/data

    # Topic defaults
    num.partitions=1
    num.recovery.threads.per.data.dir=1
    offsets.topic.replication.factor=1
    transaction.state.log.replication.factor=1
    transaction.state.log.min.isr=1
    min.insync.replicas=1

    # Log retention
    log.retention.hours=48
    log.segment.bytes=1073741824
    log.retention.check.interval.ms=300000

---
# StatefulSet for Kafka single node with KRaft mode
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  namespace: kafka
spec:
  serviceName: kafka-headless
  podManagementPolicy: Parallel
  replicas: 1  # Single node setup
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      terminationGracePeriodSeconds: 30
      securityContext:
        fsGroup: 1000
      initContainers:
      - name: volume-permission-fix
        image: busybox:1.37.0
        command: ["sh", "-c", "chown -R 1000:1000 /var/lib/kafka/data"]
        volumeMounts:
          - name: data
            mountPath: /var/lib/kafka/data
      containers:
      - name: kafka
        image: bitnami/kafka:4.0.0
        imagePullPolicy: "IfNotPresent"
        securityContext:
          runAsUser: 1000
        ports:
        - containerPort: 9092
          name: plaintext
        - containerPort: 9093
          name: controller
        env:
        - name: KAFKA_CLUSTER_ID
          value: "MkU3OEVBNTcwNTJENDM2Qg"
        - name: KAFKA_HEAP_OPTS
          value: "-Xmx1G -Xms1G"
        - name: KAFKA_OPTS
          value: "-Dkraft.enabled=true -Doffsets.topic.replication.factor=1"
        command:
        - /bin/bash
        - -c
        - |
          # Check for existing metadata or format storage
          if [ ! -f "/var/lib/kafka/data/meta.properties" ]; then
            echo "Formatting Kafka storage..."
            /opt/bitnami/kafka/bin/kafka-storage.sh format -t $KAFKA_CLUSTER_ID -c /config/server.properties
          else
            echo "Metadata already exists, skipping format"
          fi

          # Start Kafka with KRaft mode
          exec /opt/bitnami/kafka/bin/kafka-server-start.sh /config/server.properties
        volumeMounts:
        - name: data
          mountPath: /var/lib/kafka/data
        - name: config
          mountPath: /config
        resources:
          requests:
            memory: "2Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
      # Kafka Exporter sidecar container
      - name: kafka-exporter
        image: danielqsj/kafka-exporter:latest
        ports:
        - containerPort: 9404
          name: metrics
        args:
        - --kafka.server=localhost:9092
        - --web.listen-address=:9404
        - --topic.filter=.*
        - --group.filter=.*
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      volumes:
      - name: config
        configMap:
          name: kafka-kraft-config
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 3Gi

---
# Headless Service for StatefulSet
apiVersion: v1
kind: Service
metadata:
  name: kafka-headless
  namespace: kafka
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  selector:
    app: kafka
  ports:
  - port: 9092
    name: plaintext
  - port: 9093
    name: controller
  - port: 9404
    name: metrics

---
# Service for Kafka client access
apiVersion: v1
kind: Service
metadata:
  name: kafka
  namespace: kafka
spec:
  selector:
    app: kafka
  ports:
  - port: 9092
    targetPort: 9092
    name: plaintext

---
# Service for Kafka Exporter metrics with Prometheus annotations
apiVersion: v1
kind: Service
metadata:
  name: kafka-metrics
  namespace: kafka
  labels:
    app: kafka
    service: metrics
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9404"
spec:
  selector:
    app: kafka
  ports:
  - port: 9404
    targetPort: 9404
    name: metrics
  type: ClusterIP