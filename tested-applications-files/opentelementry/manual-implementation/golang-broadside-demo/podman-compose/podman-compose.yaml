# This file is optimized for podman-compose and rootless Podman.
# Ensure you have subuid/subgid configured and you've logged out/in after setting them.

version: '3.8'

services:
  grafana:
    image: aniketxshinde/serversage:latest
    ports:
      - "3000:3000"
    volumes:
      - ./data/grafana:/var/lib/grafana:Z
      - ./grafana/provisioning:/etc/grafana/provisioning:Z
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini:Z
    environment:
      GF_INSTALL_PLUGINS: grafana-opensearch-datasource
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: serversage
      GF_SERVER_ROOT_URL: ${GRAFANA_ROOT_URL}
      GF_SERVER_DOMAIN: ${GRAFANA_DOMAIN}
      GF_AUTH_GENERIC_OAUTH_ENABLED: true
      GF_AUTH_MANAGED_SERVICE_ACCOUNTS_ENABLED: true
      GF_AUTH_GENERIC_OAUTH_NAME: Keycloak
      GF_AUTH_GENERIC_OAUTH_ALLOW_SIGN_UP: true
      GF_AUTH_GENERIC_OAUTH_CLIENT_ID: ${OAUTH_CLIENT_ID}
      GF_AUTH_GENERIC_OAUTH_SCOPES: openid email profile roles offline_access
      GF_AUTH_GENERIC_USE_REFRESH_TOKENS: true
      GF_AUTH_GENERIC_OAUTH_EMAIL_ATTRIBUTE_PATH: email
      GF_AUTH_GENERIC_OAUTH_LOGIN_ATTRIBUTE_PATH: username
      GF_AUTH_GENERIC_OAUTH_NAME_ATTRIBUTE_PATH: full_name
      GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET: ${OAUTH_CLIENT_SECRET}
      GF_AUTH_GENERIC_OAUTH_AUTH_URL: ${KEYCLOAK_AUTH_URL}
      GF_AUTH_GENERIC_OAUTH_TOKEN_URL: ${KEYCLOAK_TOKEN_URL}
      GF_AUTH_GENERIC_OAUTH_API_URL: ${KEYCLOAK_API_URL}
      GF_AUTH_SIGNOUT_REDIRECT_URL: ${KEYCLOAK_LOGOUT_URL}?id_token_hint=%{id_token}&post_logout_redirect_uri=http%3A%2F%2Flocalhost%3A3000%2Flogin
      GF_AUTH_GENERIC_OAUTH_ROLE_ATTRIBUTE_PATH: contains(roles[*], 'grafana_grafana_admin') && 'GrafanaAdmin' || contains(roles[*], 'grafana_admin') && 'Admin' || contains(roles[*], 'grafana_editor') && 'Editor' || 'Viewer'
      GF_PLUGINS_PREINSTALL: grafana-llm-app,grafana-oncall-app
    depends_on:
      - prometheus
      - tempo
      - keycloak
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 200M
    networks:
      serversage-network:
        aliases:
          - grafana
    # REMOVED LOGGING SECTION
    # logging:
    #   driver: fluentd
    #   options:
    #     tag: grafana-logs
    #     fluentd-address: localhost:24224
    #     fluentd-async-connect: "true"
    #     fluentd-retry-wait: 1s
    #     fluentd-max-retries: 30

  oncall:
    image: grafana/oncall
    restart: always
    ports:
      - "8080:8080"
    command: sh -c "uwsgi --ini uwsgi.ini"
    environment:
      DATABASE_TYPE: sqlite3
      BROKER_TYPE: redis
      BASE_URL: http://oncall:8080
      SECRET_KEY: my_random_secret_must_be_more_than_32_characters_long
      FEATURE_PROMETHEUS_EXPORTER_ENABLED: false
      PROMETHEUS_EXPORTER_SECRET: ${PROMETHEUS_EXPORTER_SECRET:-prometheus}
      REDIS_URI: redis://redis:6379/0
      DJANGO_SETTINGS_MODULE: settings.hobby
      CELERY_WORKER_QUEUE: "default,critical,long,slack,telegram,webhook,retry,celery,grafana"
      CELERY_WORKER_CONCURRENCY: "1"
      CELERY_WORKER_MAX_TASKS_PER_CHILD: "100"
      CELERY_WORKER_SHUTDOWN_INTERVAL: "65m"
      CELERY_WORKER_BEAT_ENABLED: "True"
      GRAFANA_API_URL: http://grafana:3000
    volumes:
      - ./data/oncall:/var/lib/oncall:Z
    depends_on:
      redis:
        condition: service_completed_successfully # Keep this
    networks:
      serversage-network:
        aliases:
          - oncall
    # REMOVED LOGGING SECTION
    # logging:
    #   driver: fluentd
    #   options:
    #     tag: oncall-logs
    #     fluentd-address: localhost:24224
    #     fluentd-async-connect: "true"
    #     fluentd-retry-wait: 1s
    #     fluentd-max-retries: 30

  celery:
    image: grafana/oncall
    restart: always
    command: sh -c "./celery_with_exporter.sh"
    environment:
      DATABASE_TYPE: sqlite3
      BROKER_TYPE: redis
      BASE_URL: http://oncall:8080
      SECRET_KEY: my_random_secret_must_be_more_than_32_characters_long
      FEATURE_PROMETHEUS_EXPORTER_ENABLED: false
      PROMETHEUS_EXPORTER_SECRET: ${PROMETHEUS_EXPORTER_SECRET:-prometheus}
      REDIS_URI: redis://redis:6379/0
      DJANGO_SETTINGS_MODULE: settings.hobby
      CELERY_WORKER_QUEUE: "default,critical,long,slack,telegram,webhook,retry,celery,grafana"
      CELERY_WORKER_CONCURRENCY: "1"
      CELERY_WORKER_MAX_TASKS_PER_CHILD: "100"
      CELERY_WORKER_SHUTDOWN_INTERVAL: "65m"
      CELERY_WORKER_BEAT_ENABLED: "True"
      GRAFANA_API_URL: http://grafana:3000
    volumes:
      - ./data/oncall:/var/lib/oncall:Z
    depends_on:
      redis: # Oncall DB migration for SQLite also needs redis (as broker)
        condition: service_completed_successfully # Keep this
    networks:
      serversage-network:
        aliases:
          - celery
    # REMOVED LOGGING SECTION
    # logging:
    #   driver: fluentd
    #   options:
    #     tag: celery-logs
    #     fluentd-address: localhost:24224
    #     fluentd-async-connect: "true"
    #     fluentd-retry-wait: 1s
    #     fluentd-max-retries: 30

  oncall_db_migration:
    image: grafana/oncall
    command: python manage.py migrate --noinput
    environment:
      DATABASE_TYPE: sqlite3
      BROKER_TYPE: redis
      BASE_URL: http://oncall:8080
      SECRET_KEY: my_random_secret_must_be_more_than_32_characters_long
      FEATURE_PROMETHEUS_EXPORTER_ENABLED: false
      PROMETHEUS_EXPORTER_SECRET: ${PROMETHEUS_EXPORTER_SECRET:-prometheus}
      REDIS_URI: redis://redis:6379/0
      DJANGO_SETTINGS_MODULE: settings.hobby
      CELERY_WORKER_QUEUE: "default,critical,long,slack,telegram,webhook,retry,celery,grafana"
      CELERY_WORKER_CONCURRENCY: "1"
      CELERY_WORKER_MAX_TASKS_PER_CHILD: "100"
      CELERY_WORKER_SHUTDOWN_INTERVAL: "65m"
      CELERY_WORKER_BEAT_ENABLED: "True"
      GRAFANA_API_URL: http://grafana:3000
    volumes:
      - ./data/oncall:/var/lib/oncall:Z
    depends_on:
      - redis # Simple dependency for older Podman
    networks:
      serversage-network:
        aliases:
          - oncall_db_migration

  redis:
    image: redis:7.0.15
    restart: always
    expose:
      - 6379
    volumes:
      - ./data/redis:/data:Z
    deploy:
      resources:
        limits:
          memory: 500m
          cpus: "0.5"
    # REMOVED HEALTHCHECK
    # healthcheck:
    #   test: ["CMD", "redis-cli", "ping"]
    #   timeout: 5s
    #   interval: 5s
    #   retries: 10
    #   start_period: 10s
    networks:
      serversage-network:
        aliases:
          - redis
    # REMOVED LOGGING SECTION
    # logging:
    #   driver: fluentd
    #   options:
    #     tag: redis-logs
    #     fluentd-address: localhost:24224
    #     fluentd-async-connect: "true"
    #     fluentd-retry-wait: 1s
    #     fluentd-max-retries: 30

  cloudwatch-exporter:
    image: prom/cloudwatch-exporter:latest
    ports:
      - "9106:9106"
    volumes:
      - ./cloudwatch-exporter:/config:Z
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=us-east-1
    command:
      - /config/config.yml
    restart: unless-stopped
    networks:
      serversage-network:
        aliases:
          - cloudwatch-exporter
    # REMOVED LOGGING SECTION
    # logging:
    #   driver: fluentd
    #   options:
    #     tag: cloudwatch-exporter-logs
    #     fluentd-address: localhost:24224
    #     fluentd-async-connect: "true"
    #     fluentd-retry-wait: 1s
    #     fluentd-max-retries: 30

  keycloak:
    image: quay.io/keycloak/keycloak:25.0.1
    command: start-dev --import-realm
    environment:
      - KC_HOSTNAME=${KEYCLOAK_PUBLIC_URL}/
      - KC_HOSTNAME_STRICT=false
      - KC_HOSTNAME_BACKCHANNEL_DYNAMIC=true
      - KC_HTTP_ENABLED=true
      - KC_DB=postgres
      - KC_DB_USERNAME=${POSTGRES_USER}
      - KC_DB_PASSWORD=${POSTGRES_PASSWORD}
      - KC_DB_URL_HOST=postgres
      - KC_DB_URL_PORT=5432
      - KC_DB_URL_DATABASE=${POSTGRES_DB}
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - KC_METRICS_ENABLED=true
      - KC_HTTP_METRICS_HISTOGRAMS_ENABLED=true
      - KC_CACHE_METRICS_HISTOGRAMS_ENABLED=true
      - KC_HTTP_METRICS_SLOS=5,10,25,50,250,500,1000,2500,5000,10000
      - KC_EVENT_METRICS_USER_ENABLED=true
      - KC_EVENT_METRICS_USER_EVENTS=login,logout,register,update_profile,reset_password,user_disabled_by_temporary_lockout,user_disabled_by_permanent_lockout
      - KC_EVENT_METRICS_USER_TAGS=realm,clientId,idp
    depends_on:
      - postgres # Simple dependency for older Podman
    ports:
      - '3002:8080'
      - '9000:9000'
    volumes:
      - ./keycloak/realm-import:/opt/keycloak/data/import:Z
    networks:
      serversage-network:
        aliases:
          - keycloak
          - keycloak-public
    # REMOVED LOGGING SECTION
    # logging:
    #   driver: fluentd
    #   options:
    #     tag: keycloak-logs
    #     fluentd-address: localhost:24224
    #     fluentd-async-connect: "true"
    #     fluentd-retry-wait: 1s
    #     fluentd-max-retries: 30

  postgres:
    image: postgres:16
    volumes:
      - ./data/postgres:/var/lib/postgresql/data:Z
      - ./etc/postgres/init:/docker-entrypoint-initdb.d:Z
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    command:
      - "postgres"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements"
    # REMOVED HEALTHCHECK
    # healthcheck:
    #   test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
    #   interval: 5s
    #   timeout: 5s
    #   retries: 5
    #   start_period: 10s
    networks:
      serversage-network:
        aliases:
          - postgres
    # REMOVED LOGGING SECTION
    # logging:
    #   driver: fluentd
    #   options:
    #     tag: postgres-logs
    #     fluentd-address: localhost:24224
    #     fluentd-async-connect: "true"
    #     fluentd-retry-wait: 1s
    #     fluentd-max-retries: 30

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:Z
      - ./data/prometheus:/prometheus:Z
    command: --config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/prometheus
    restart: unless-stopped
    networks:
      serversage-network:
        aliases:
          - prometheus
    # REMOVED LOGGING SECTION
    # logging:
    #   driver: fluentd
    #   options:
    #     tag: prometheus-logs
    #     fluentd-address: localhost:24224
    #     fluentd-async-connect: "true"
    #     fluentd-retry-wait: 1s
    #     fluentd-max-retries: 30

  tempo:
    image: grafana/tempo:latest
    command: -config.file=/etc/tempo.yaml
    ports:
      - "3100:3100"
      - "4317:4317"
      - "4318:4318"
      - "9411:9411"
    volumes:
      - ./tempo/tempo.yaml:/etc/tempo.yaml:Z
      - ./data/tempo:/tmp/tempo:Z
    restart: unless-stopped
    networks:
      serversage-network:
        aliases:
          - tempo
    # REMOVED LOGGING SECTION
    # logging:
    #   driver: fluentd
    #   options:
    #     tag: tempo-logs
    #     fluentd-address: localhost:24224
    #     fluentd-async-connect: "true"
    #     fluentd-retry-wait: 1s
    #     fluentd-max-retries: 30

networks:
  serversage-network:
    driver: bridge
    name: serversage-network
    attachable: true

volumes:
  data: