# -----------------------------------------------
# Persistent Volume
# -----------------------------------------------
apiVersion: v1
kind: PersistentVolume
metadata:
  name: grafana-oncall1-pv
  namespace: monitoring
spec:
  storageClassName: standard
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: "/bse-data/data/monitoring/grafana-oncall"

---
# -----------------------------------------------
# Persistent Volume Claim
# -----------------------------------------------
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-oncall1-pvc
  namespace: monitoring
spec:
  storageClassName: standard
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  volumeName: grafana-oncall1-pv

---
# -----------------------------------------------
# Init ConfigMap for Directory Setup
# -----------------------------------------------
apiVersion: v1
kind: ConfigMap
metadata:
  name: oncall-init-script
  namespace: monitoring
data:
  init.sh: |
    #!/bin/sh
    mkdir -p /var/lib/oncall
    chmod 755 /var/lib/oncall
    touch /var/lib/oncall/oncall.db
    chmod 666 /var/lib/oncall/oncall.db

---
# -----------------------------------------------
# OnCall DB Migration Job
# -----------------------------------------------
apiVersion: batch/v1
kind: Job
metadata:
  name: oncall-db-migration
  namespace: monitoring
spec:
  template:
    metadata:
      labels:
        app: oncall-db-migration
    spec:
      restartPolicy: Never
      initContainers:
        - name: init-db-dir
          image: busybox:latest
          command: ["/bin/sh", "-c", "sh /scripts/init.sh"]
          volumeMounts:
            - name: oncall-data
              mountPath: /var/lib/oncall
            - name: init-script
              mountPath: /scripts
      containers:
        - name: oncall-db-migration
          image: grafana/oncall:v1.15.4
          securityContext:
            runAsUser: 1000
          command: ["python", "manage.py", "migrate", "--noinput"]
          env:
            - name: DATABASE_TYPE
              value: "sqlite3"
            - name: SQLITE_DB_PATH
              value: "/var/lib/oncall/oncall.db"
            - name: BROKER_TYPE
              value: "redis"
            - name: BASE_URL
              value: "http://oncall.monitoring.svc.cluster.local:8080"
            - name: SECRET_KEY
              value: "my_random_secret_must_be_more_than_32_characters_long"
            - name: FEATURE_PROMETHEUS_EXPORTER_ENABLED
              value: "false"
            - name: PROMETHEUS_EXPORTER_SECRET
              value: "prometheus"
            - name: REDIS_URI
              value: "redis://redis-service.starmfv2-qa.svc.cluster.local:6379/0"
            - name: DJANGO_SETTINGS_MODULE
              value: "settings.hobby"
            - name: GRAFANA_API_URL
              value: "http://grafana.prometheus.svc.cluster.local:3000"
            - name: UWSGI_PYTHON_INTERPRETER
              value: "python3"  # Ensure Python 3 is used
            - name: DATABASE_MIGRATION_RETRIES
              value: "5"  # Allow retries for database migrations
          volumeMounts:
            - name: oncall-data
              mountPath: /var/lib/oncall
      volumes:
        - name: oncall-data
          persistentVolumeClaim:
            claimName: grafana-oncall1-pvc
        - name: init-script
          configMap:
            name: oncall-init-script
            defaultMode: 0777
      nodeSelector:
        name: aws-worker-1

---
# -----------------------------------------------
# Grafana OnCall Deployment
# -----------------------------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana-oncall
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana-oncall
  template:
    metadata:
      labels:
        app: grafana-oncall
    spec:
      initContainers:
        - name: check-db-ready
          image: busybox:latest
          command: ['sh', '-c', 'until test -f /var/lib/oncall/oncall.db; do echo waiting for database; sleep 2; done;']
          volumeMounts:
            - name: oncall-data
              mountPath: /var/lib/oncall
      containers:
        - name: oncall
          image: grafana/oncall:v1.15.4
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
            allowPrivilegeEscalation: false
          command: ["sh", "-c", "uwsgi --ini uwsgi.ini"]
          ports:
            - containerPort: 8080
          env:
            - name: DATABASE_TYPE
              value: "sqlite3"
            - name: SQLITE_DB_PATH
              value: "/var/lib/oncall/oncall.db"
            - name: BROKER_TYPE
              value: "redis"
            - name: BASE_URL
              value: "http://oncall.monitoring.svc.cluster.local:8080"
            - name: SECRET_KEY
              value: "my_random_secret_must_be_more_than_32_characters_long"
            - name: FEATURE_PROMETHEUS_EXPORTER_ENABLED
              value: "false"
            - name: PROMETHEUS_EXPORTER_SECRET
              value: "prometheus"
            - name: REDIS_URI
              value: "redis://redis-service.starmfv2-qa.svc.cluster.local:6379/0"
            - name: DJANGO_SETTINGS_MODULE
              value: "settings.hobby"
            - name: CELERY_WORKER_QUEUE
              value: "default,critical,long,slack,telegram,webhook,retry,celery,grafana"
            - name: CELERY_WORKER_CONCURRENCY
              value: "1"
            - name: CELERY_WORKER_MAX_TASKS_PER_CHILD
              value: "100"
            - name: CELERY_WORKER_SHUTDOWN_INTERVAL
              value: "65m"
            - name: CELERY_WORKER_BEAT_ENABLED
              value: "True"
            - name: GRAFANA_API_URL
              value: "http://grafana.prometheus.svc.cluster.local:3000"
            - name: UWSGI_PYTHON_INTERPRETER
              value: "python3"  # Specify Python 3 interpreter
            - name: ONCALL_SQLITE_JOURNAL_MODE
              value: "WAL"  # Use WAL mode for better concurrency
            - name: CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP
              value: "true"
          readinessProbe:
            httpGet:
              path: /ready
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /livez
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 20
          volumeMounts:
            - name: oncall-data
              mountPath: /var/lib/oncall
      volumes:
        - name: oncall-data
          persistentVolumeClaim:
            claimName: grafana-oncall1-pvc
      nodeSelector:
        name: aws-worker-1

---
# -----------------------------------------------
# Celery Worker Deployment
# -----------------------------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: celery
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: celery
  template:
    metadata:
      labels:
        app: celery
    spec:
      initContainers:
        - name: wait-for-oncall
          image: busybox
          command: ['sh', '-c', 'until wget -q -O- http://oncall.monitoring.svc.cluster.local:8080/ready; do echo waiting for oncall; sleep 5; done;']
      containers:
        - name: celery
          image: grafana/oncall:v1.15.4
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
            allowPrivilegeEscalation: false
          command:
            - sh
            - "-c"
            - "./celery_with_exporter.sh"
          env:
            - name: DATABASE_TYPE
              value: "sqlite3"
            - name: SQLITE_DB_PATH
              value: "/var/lib/oncall/oncall.db"
            - name: BROKER_TYPE
              value: "redis"
            - name: BASE_URL
              value: "http://oncall.monitoring.svc.cluster.local:8080"
            - name: SECRET_KEY
              value: "my_random_secret_must_be_more_than_32_characters_long"
            - name: FEATURE_PROMETHEUS_EXPORTER_ENABLED
              value: "false"
            - name: PROMETHEUS_EXPORTER_SECRET
              value: "prometheus"
            - name: REDIS_URI
              value: "redis://redis-service.starmfv2-qa.svc.cluster.local:6379/0"
            - name: DJANGO_SETTINGS_MODULE
              value: "settings.hobby"
            - name: CELERY_WORKER_QUEUE
              value: "default,critical,long,slack,telegram,webhook,retry,celery,grafana"
            - name: CELERY_WORKER_CONCURRENCY
              value: "1"
            - name: CELERY_WORKER_MAX_TASKS_PER_CHILD
              value: "100"
            - name: CELERY_WORKER_SHUTDOWN_INTERVAL
              value: "65m"
            - name: CELERY_WORKER_BEAT_ENABLED
              value: "true"
            - name: CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP
              value: "true"
            - name: GRAFANA_API_URL
              value: "http://grafana.prometheus.svc.cluster.local:3000"
            - name: C_FORCE_ROOT
              value: "false"  # Don't run Celery as root
            - name: UWSGI_PYTHON_INTERPRETER
              value: "python3"  # Specify Python 3 interpreter
            - name: ONCALL_SQLITE_JOURNAL_MODE
              value: "WAL"  # Use WAL mode for better concurrency
          volumeMounts:
            - name: oncall-data
              mountPath: /var/lib/oncall
          resources:
            limits:
              memory: "512Mi"
              cpu: "500m"
            requests:
              memory: "256Mi"
              cpu: "250m"
      volumes:
        - name: oncall-data
          persistentVolumeClaim:
            claimName: grafana-oncall1-pvc
      nodeSelector:
        name: aws-worker-1

---
# -----------------------------------------------
# OnCall Service
# -----------------------------------------------
apiVersion: v1
kind: Service
metadata:
  name: oncall
  namespace: monitoring
spec:
  selector:
    app: grafana-oncall
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
  type: ClusterIP